// components/TOTPQRCode.tsx
import React, { useEffect, useState } from "react";
import Image from "next/image";
//TODO: Potentially figure out why import doesn't work
var QRCode = require('qrcode')

import CloseIcon from '@mui/icons-material/Close';
import Spinner from '../Spinner';

interface TOTPQRCodeProps {
  secret: string
  issuer: string
  accountName: string
  userId: string
  onCancel: () => void
  onVerified: () => void
}

export default function TwoFactorQR({ secret, issuer, accountName, userId, onCancel, onVerified } : TOTPQRCodeProps) {
  const [qrDataURL, setQRDataURL] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    const generateQRCode = async () => {
      const otpAuthURL = `otpauth://totp/${encodeURIComponent(
        accountName
      )}?secret=${secret}&issuer=${encodeURIComponent(issuer)}`;

      const dataURL = await QRCode.toDataURL(otpAuthURL);
      setQRDataURL(dataURL);
    };

    generateQRCode();
  }, [secret, issuer, accountName]);

  function closeModal(){
    onCancel()
  }

  async function verify(){
    setIsLoading(true)
    console.log("Starting verification...")
    const verifyResponse = await fetch('/api/auth/verifyTwoFactor',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: '1',
        code: '123456'
      })
    }).then(res => res.json())

    if(verifyResponse) {
      console.log("Verified!")
    }else{
      console.log("Not verified")
    }
    setIsLoading(false)
    onVerified()
  }

  return (
    <div className={'flex flex-col items-center'}>
      <div onClick={closeModal}>
        <CloseIcon className={'absolute top-4 right-4 cursor-pointer'}/>
      </div>
      <span className={'mt-8 text-3xl font-thin mx-auto mb-4'}>
        {`Authenticator App`}
      </span>
      <span className={'px-8 text-center mx-auto text-gray-600'}>
        {/* Note: For UX Reasons, we probably shouldn't also show the secret. (Maybe a good middle ground could be a link below QR code that then reveals it?) */}
        {/* {`Within your authenticator app, scan the QR code below, or enter the following "secret" manually to import: `}<span className={'font-bold wrapPhrase'}>{` ${secret}`}</span> */}
        {`Within your authenticator app, scan the QR code below: `}
      </span>
      {qrDataURL ? (
        <Image src={qrDataURL} alt="Scan this QR code with your authenticator app" height={300} width={300}/>
      ) : (
        <p>Loading QR code...</p>
      )}

      <span className={'px-8 text-center mx-auto text-gray-600'}>
        {`Enter the 6-digit code generated by your app:`}
      </span>
      {isLoading && <Spinner/>}
      <input className={'border-2 border-gray-300 bg-gray-100 rounded-md px-4 py-2 mt-4 w-1/2 mx-auto'} type="text" maxLength={6}/>
      <button className={'bg-brand-green-400 hover:bg-brand-green-500 disabled:bg-gray-400 text-white p-2 rounded-md px-6 mt-5 mb-8'} onClick={verify}>
        {`Verify`}
      </button>


    </div>
  );
}

